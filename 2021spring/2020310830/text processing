from textblob import TextBlob
import nltk
import re

"""
TODO make sure that various input types are compatible 
"""


class TextProcessing:

    def __init__(self, text):
        self.text = text

    def __repr__(self):
        return 'TextProcessing(input type = {})'.format(type(self.text))

    def __str__(self):
        return 'An object for manipulating text.'

    def freq_dist(self):
        return nltk.FreqDist(self.text)

    def count(self):
        return len(self.text)

    def length(self):
        total_character_length = 0

        for item in self.text:
            length = len(item)
            total_character_length += length

        return total_character_length

    def rounded_average(self):
        return round(self.length() / self.count(), 2)

    @staticmethod
    def first_comparison_return(difference):
        return 'The first input parameter attribute is %.2f greater than the seconds.' % difference

    @staticmethod
    def second_comparison_return(difference):
        return 'The second input parameter attribute is %.2f greater than the firsts.' % difference

    def comparison_output_logic(self, difference):

        if difference < 0:
            difference = abs(difference)
            return self.second_comparison_return(difference)

        else:
            return self.first_comparison_return(difference)

    def compare_counts(self, other):

        difference = self.count() - other.count()
        return self.comparison_output_logic(difference)

    def compare_lengths(self, other):

        difference = self.length() - other.length()
        return self.comparison_output_logic(difference)

    def compare_averages(self, other):

        difference = self.rounded_average() - other.rounded_average()
        return self.comparison_output_logic(difference)


"""
CONVERTS INPUT TEXT TYPE TO *STR*
AFFECTS ALL SUBCLASSES, ALL SELF.TEXT IS A *STR*
instigates basic text manipulation that cascades to its subclasses and ultimately to its final processed form
"""


class Text(object):

    def __init__(self, text, lower=False):
        self.text = text
        self.type_check()
        if lower is True:
            self.lower()
        self.blob = TextBlob(self.text)

    """
    TODO PROBABLY DELETE THESE TWO CLASS METHODS
    
    Additional Text constructor method:
    
    initializes a Text object with the primary attribute of 'text' is in lower case format
    """

    @classmethod
    def lowercase(cls, text):
        str_text = cls.class_type_check(text)
        return Text(cls(str_text).lower())

    @classmethod
    def class_type_check(cls, text):
        if type(text) is not str:
            text = ' '.join(text)
            return text

    def __repr__(self):
        return 'Text(input-type = {}, \nsubclasses = {})'.format(type(self.text), Text.__subclasses__())

    def __str__(self):
        return 'A base-class object for basic text processing operations.'

    def type_check(self):
        if type(self.text) is not str:
            print('not a str', type(self.text))
            if type(self.text) is list:
                print('list')
                self.text = ' '.join(self.text)
            if type(self.text) is None:
                print('NoneType received at', self)
                self.text = ''
                return

    def lower(self):
        self.text = self.text.casefold()

    """
    Should these go into TP class?
    """

    def remove_punctuation(self):
        pass

    def remove_stopwords(self):
        pass

    def get_sentiment(self):
        return self.blob.sentiment


"""
class for producing sentences from text received from the Text class
"""


class SentenceAnalysis(Text):

    def __init__(self, text, lower):
        super().__init__(text, lower)

        self.sentences = self.make_sentences()
        self.text_processing = TextProcessing(self.sentences)

    def __repr__(self):
        return 'SentenceAnalysis({}, {}, \nSentenceAnalysis parent info = {})'.format(type(self.sentences),
                                                                                      repr(self.text_processing),
                                                                                      super().__repr__())

    def __str__(self):
        return 'An object for sentence analysis.'

    def make_sentences(self):
        sentences_split = self.text.split('.')
        return sentences_split


"""
class for producing words from text received from the Text class
"""


class WordAnalysis(Text):

    def __init__(self, text, lower):
        super().__init__(text, lower)

        self.words = self.make_words()
        self.text_processing = TextProcessing(self.words)

    def __repr__(self):
        return 'WordAnalysis({}, {}, \nWordAnalysis parent info = {})'.format(type(self.words),
                                                                              repr(self.text_processing),
                                                                              super().__repr__())

    def make_words(self):
        text_in_word_tokens = self.text.split()
        return text_in_word_tokens


"""
for both TextInterface and PrintInterface:
    if lower parameter is True, use lowercase text for analysis - default is False
"""


class TextInterface(object):
    def __init__(self, text, lower=False):
        self.text = text
        self.lower = lower
        self.sentence_analysis = SentenceAnalysis(self.text, self.lower)
        self.word_analysis = WordAnalysis(self.text, self.lower)

    def __repr__(self):
        return 'TextInterface(attributes = {}, {}, {})'.format(type(self.text), repr(self.word_analysis),
                                                               repr(self.sentence_analysis))

    def get_text(self):
        return self.sentence_analysis.text

    def get_sentences(self):
        return self.sentence_analysis.sentences

    def get_words(self):
        return self.word_analysis.words

    def average_word_length(self):
        average_length = self.sentence_analysis.text_processing.rounded_average() / \
                         self.word_analysis.text_processing.rounded_average()
        return average_length

    def average_sentence_length(self):
        return self.sentence_analysis.text_processing.rounded_average()

    def number_of_words(self):
        return self.word_analysis.text_processing.count()

    def number_of_sentences(self):
        return self.sentence_analysis.text_processing.count()

    def sentence_freq_dist(self):
        return self.sentence_analysis.text_processing.freq_dist()

    def word_freq_dist(self):
        return self.word_analysis.text_processing.freq_dist()


"""
PrintInterface - a subclass of TextInterface
simply adds the console-print function directly to the return value of its parent class
"""


class PrintInterface(TextInterface):

    def __init__(self, text, lower=False):
        super().__init__(text, lower)
        self.text = text
        self.lower = lower

    def __repr__(self):
        return 'PrintInterface(attributes : input-type = {}, lower = {}\nPrintInterface parent info = {})' \
            .format(type(self.text), self.lower, super().__repr__())

    def print_text(self):
        print(self.get_text())

    def print_words(self):
        print(self.get_words())

    def print_sentences(self):
        print(self.get_sentences())

    def print_average_word_length(self):
        print(self.average_sentence_length())

    def print_average_sentence_length(self):
        print(self.average_sentence_length())

    def print_sentence_freq_dist(self):
        print(self.sentence_freq_dist())

    def print_word_freq_dist(self):
        print(self.word_freq_dist())

    def print_sentence_sentiment(self):
        print(self.sentence_analysis.blob.sentiment)

    def print_word_sentiment(self):
        print(self.word_analysis.blob.sentiment)

    def print_sentence_count(self):
        print(self.number_of_sentences())

    def print_word_count(self):
        print(self.number_of_words())


"""
